// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWStructuredBuffer<float2> _PointColorsRxRy;
RWStructuredBuffer<float> _PointColorsElipseWeights;
RWStructuredBuffer<float2> _PointColorsPositions;
RWStructuredBuffer<float4> _PointColorsColors;


int _NumColPoints;
int _Width;
int _Height;
bool _OpMode;

// Helper functions
float rectEquation(float x, float y, float rectX, float rectY, float rectRx, float rectRy) {
    float dist_x = abs(x - rectX);
    float dist_y = abs(y - rectY);

    if (dist_x > rectRx / 2.0f || dist_y > rectRy / 2.0f) return 1.0f;

    float weight = 0.0f;
    return weight;
}

//src: https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-range-0-255-for-both
float4  HSV2RGB(float4 _HSV)
{
    _HSV.x = fmod(100.0 + _HSV.x, 1.0);                                       // Ensure [0,1[

    float   HueSlice = 6.0 * _HSV.x;                                            // In [0,6[
    float   HueSliceInteger = floor(HueSlice);
    float   HueSliceInterpolant = HueSlice - HueSliceInteger;                   // In [0,1[ for each hue slice

    float3  TempRGB = float3(_HSV.z * (1.0 - _HSV.y),
        _HSV.z * (1.0 - _HSV.y * HueSliceInterpolant),
        _HSV.z * (1.0 - _HSV.y * (1.0 - HueSliceInterpolant)));

    // The idea here to avoid conditions is to notice that the conversion code can be rewritten:
    //    if      ( var_i == 0 ) { R = V         ; G = TempRGB.z ; B = TempRGB.x }
    //    else if ( var_i == 2 ) { R = TempRGB.x ; G = V         ; B = TempRGB.z }
    //    else if ( var_i == 4 ) { R = TempRGB.z ; G = TempRGB.x ; B = V     }
    // 
    //    else if ( var_i == 1 ) { R = TempRGB.y ; G = V         ; B = TempRGB.x }
    //    else if ( var_i == 3 ) { R = TempRGB.x ; G = TempRGB.y ; B = V     }
    //    else if ( var_i == 5 ) { R = V         ; G = TempRGB.x ; B = TempRGB.y }
    //
    // This shows several things:
    //  . A separation between even and odd slices
    //  . If slices (0,2,4) and (1,3,5) can be rewritten as basically being slices (0,1,2) then
    //      the operation simply amounts to performing a "rotate right" on the RGB components
    //  . The base value to rotate is either (V, B, R) for even slices or (G, V, R) for odd slices
    //
    float   IsOddSlice = fmod(HueSliceInteger, 2.0);                          // 0 if even (slices 0, 2, 4), 1 if odd (slices 1, 3, 5)
    float   ThreeSliceSelector = 0.5 * (HueSliceInteger - IsOddSlice);          // (0, 1, 2) corresponding to slices (0, 2, 4) and (1, 3, 5)

    float3  ScrollingRGBForEvenSlices = float3(_HSV.z, TempRGB.zx);           // (V, Temp Blue, Temp Red) for even slices (0, 2, 4)
    float3  ScrollingRGBForOddSlices = float3(TempRGB.y, _HSV.z, TempRGB.x);  // (Temp Green, V, Temp Red) for odd slices (1, 3, 5)
    float3  ScrollingRGB = lerp(ScrollingRGBForEvenSlices, ScrollingRGBForOddSlices, IsOddSlice);

    float   IsNotFirstSlice = saturate(ThreeSliceSelector);                   // 1 if NOT the first slice (true for slices 1 and 2)
    float   IsNotSecondSlice = saturate(ThreeSliceSelector - 1.0);              // 1 if NOT the first or second slice (true only for slice 2)

    float3 rgb = lerp(ScrollingRGB.xyz, lerp(ScrollingRGB.zxy, ScrollingRGB.yzx, IsNotSecondSlice), IsNotFirstSlice);    // Make the RGB rotate right depending on final slice index
    return float4(rgb.xyz, _HSV.w);
}

// END helper functions
[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

    float4 color = Result[id.xy];

    if (_OpMode) {
        color.w = 0.0f;
        for (int i = 0; i < _NumColPoints; i++) {
            float2 texPoint_pos = _PointColorsPositions[i];
            float2 texPoint_rect = _PointColorsRxRy[i];
            float weight = pow(abs(rectEquation((float)id.x, (float)id.y, texPoint_pos.x, texPoint_pos.y, texPoint_rect.x, texPoint_rect.y)), _PointColorsElipseWeights[i]);

            float ratio = smoothstep(0.0f, 1.0f, weight);
            float4 rgbw = lerp(HSV2RGB(_PointColorsColors[i]), 0.0f, ratio);
            /*float r = lerp(_PointColors[i].x, 0.0f, ratio);
            float g = lerp(_PointColors[i].y, 0.0f, ratio);
            float b = lerp(_PointColors[i].z, 0.0f, ratio);
            float w = lerp(_PointColors[i].w, 0.0f, ratio);*/
            color.w += rgbw.w;
        }
    }
    else {
        color.xyz = float3(0.0, 0.0, 0.0);
        for (int i = 0; i < _NumColPoints; i++) {
            float2 texPoint_pos = _PointColorsPositions[i];
            float2 texPoint_rect = _PointColorsRxRy[i];
            float weight = pow(abs(rectEquation((float)id.x, (float)id.y, texPoint_pos.x, texPoint_pos.y, texPoint_rect.x, texPoint_rect.y)), _PointColorsElipseWeights[i]);

            float ratio = smoothstep(0.0f, 1.0f, weight);
            float4 rgbw = lerp(HSV2RGB(_PointColorsColors[i]), 0.0f, ratio);
            /*float r = lerp(_PointColors[i].x, 0.0f, ratio);
            float g = lerp(_PointColors[i].y, 0.0f, ratio);
            float b = lerp(_PointColors[i].z, 0.0f, ratio);
            float w = lerp(_PointColors[i].w, 0.0f, ratio);*/
            color.xyz += rgbw.xyz;
        }
    }

    Result[id.xy] = color;
}

